import feedparser
from flask import Flask, render_template, request

app = Flask(__name__)

# Updated RSS Feed URLs
RSS_FEEDS = {
    'Technology': 'http://feeds.bbci.co.uk/news/technology/rss.xml',
    'World': 'http://feeds.bbci.co.uk/news/world/rss.xml',
    'Sports': 'https://rss.cnn.com/rss/edition_sport.rss',
    'Entertainment': 'http://feeds.bbci.co.uk/news/entertainment_and_arts/rss.xml',
    'Business': 'http://feeds.bbci.co.uk/news/business/rss.xml',
    'Science': 'http://feeds.bbci.co.uk/news/science_and_environment/rss.xml',
    'Travel': 'http://feeds.bbci.co.uk/news/world/rss.xml',
    'Photography': 'https://rss.cnn.com/rss/edition_travel.rss',
}


def fetch_news(category=None):
    news_data = []
    for cat, url in RSS_FEEDS.items():
        if category and cat != category:
            continue  # Skip categories that don't match the selected one

        print(f"Fetching data for category: {cat}")
        feed = feedparser.parse(url)

        if feed.entries:
            for entry in feed.entries[:5]:  # Limit to 5 articles per category
                summary = entry.summary if 'summary' in entry else 'No summary available'
                published = entry.published if 'published' in entry else 'No date available'

                # Extract image from the feed if available
                image = None
                if 'media_content' in entry:
                    image = entry.media_content[0]['url']
                elif 'media_thumbnail' in entry:
                    image = entry.media_thumbnail[0]['url']

                news_data.append({
                    "title": entry.title,
                    "link": entry.link,
                    "published": published,
                    "category": cat,
                    "summary": summary,
                    "image": image,  # Add image to the data
                })

    return news_data


@app.route("/")
def categories():
    return render_template("categories.html", categories=RSS_FEEDS.keys())


@app.route("/news")
def news():
    category = request.args.get("category")  # Fetch the category from the query parameter
    news = fetch_news(category)  # Fetch news for the category or all news if no category
    return render_template("index.html", news=news, category=category)



if __name__ == "__main__":
    app.run(debug=True)
